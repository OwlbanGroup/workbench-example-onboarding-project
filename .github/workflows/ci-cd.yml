---
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pre-commit-

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit
      run: pre-commit run --all-files

  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Run safety check
      run: safety check --full-report

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov hypothesis

    - name: Run tests
      run: |
        python run_all_tests.py

    - name: Generate coverage report
      run: |
        python -m pytest --cov=src/tutorial_app --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint, dependency-scan, test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Update deployment image
      run: |
        sed -i 's|image: tutorial-app:latest|image: ${{ needs.build-and-push.outputs.image }}|g' deploy/kubernetes/deployment.yml

    - name: Deploy to staging
      run: |
        kubectl apply -f deploy/kubernetes/ --namespace staging
        kubectl rollout status deployment/tutorial-app --namespace staging --timeout=300s
        kubectl rollout status deployment/tutorial-backend --namespace staging --timeout=300s

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Update deployment image
      run: |
        sed -i 's|image: tutorial-app:latest|image: ${{ needs.build-and-push.outputs.image }}|g' deploy/kubernetes/deployment.yml

    - name: Deploy to production
      run: |
        kubectl apply -f deploy/kubernetes/ --namespace production
        kubectl rollout status deployment/tutorial-app --namespace production --timeout=300s
        kubectl rollout status deployment/tutorial-backend --namespace production --timeout=300s

  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
    - name: Run performance tests
      run: |
        echo "Running basic performance tests against staging"
        # Placeholder: Install k6 and run tests
        # curl -s https://api.github.com/repos/grafana/k6/releases/latest | grep browser_download_url | grep linux | cut -d '"' -f 4 | xargs curl -L -o k6.tar.gz
        # tar -xzf k6.tar.gz
        # ./k6 run performance-tests.js

  e2e-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
    - name: Run E2E tests
      run: |
        echo "Running basic E2E tests against staging"
        # Placeholder: Install playwright or similar
        # npm install -g playwright
        # playwright test e2e-tests/

  notifications:
    runs-on: ubuntu-latest
    needs: [lint, dependency-scan, test, security-scan, build-and-push, deploy-staging, deploy-production, performance-test, e2e-test]
    if: failure()
    steps:
    - name: Send failure notification
      run: |
        echo "Workflow failed. Sending notification..."
        # Placeholder: Send to Slack or create GitHub issue
        # curl -X POST -H 'Content-type: application/json' --data '{"text":"CI/CD Pipeline failed"}' ${{ secrets.SLACK_WEBHOOK }}
